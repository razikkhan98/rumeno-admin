To extract an image embedded within a string of HTML content in React and display it using an `<img>` tag, you can follow these steps:

1. **Parse the HTML Content**: First, you need to parse the HTML content to find the `<img>` tag that contains the base64 encoded image data.

2. **Extract the Image Data**: Once you have located the `<img>` tag, extract its `src` attribute which contains the base64 encoded image data.

3. **Display the Image**: Finally, decode the base64 string and set it as the source (`src`) of an `<img>` tag in your React component.

Here's how you can implement this in a React component:

```jsx
import React, { useEffect, useState } from 'react';

const HtmlContentWithImage = ({ htmlContent }) => {
  const [imageSrc, setImageSrc] = useState('');

  useEffect(() => {
    // Function to extract image src from HTML content
    const extractImageSrc = (html) => {
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, "text/html");
      const images = doc.getElementsByTagName('img');
      if (images.length > 0 && images[0].getAttribute('src')) {
        return images[0].getAttribute('src');
      }
      return '';
    };

    // Extracting image src from the provided HTML content
    const extractedSrc = extractImageSrc(htmlContent);
    if (extractedSrc) {
      // Decoding base64 string to display as an image
      const decodedImage = atob(extractedSrc.split(',')[1]);
      const imgBlob = new Blob([decodedImage], { type: 'image/png' });
      setImageSrc(URL.createObjectURL(imgBlob));
    }
  }, [htmlContent]);

  return (
    <div>
      {imageSrc ? <img src={imageSrc} alt="Extracted" /> : <p>No image found</p>}
    </div>
  );
};

export default HtmlContentWithImage;
```

### How It Works:
- The `useEffect` hook runs whenever the `htmlContent` prop changes.
- Inside `useEffect`, we define a function `extractImageSrc` that uses the `DOMParser` API to parse the HTML content and extract the `src` attribute of the first `<img>` tag found.
- We then check if there's an image source; if so, we proceed to decode the base64 string and create a blob URL from it. This blob URL is safe to use directly in an `<img>` tag's `src` attribute.
- Finally, we conditionally render either the `<img>` tag displaying the extracted image or a message indicating no image was found.

This approach allows you to dynamically extract and display images embedded within HTML strings in a React application.